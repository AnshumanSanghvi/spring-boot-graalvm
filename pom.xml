<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<!-- minimum version 2.4.3 is required for spring native -->
		<version>2.4.3</version>
		<relativePath/>
	</parent>
	<groupId>com.anshuman.spring</groupId>
	<artifactId>graalVM</artifactId>
	<version>1.0</version>
	<name>SpringBootGraalVMDemo</name>
	<description>Demo project for Spring Boot using GraalVM</description>
	<properties>
		<java.version>11</java.version>
		<start-class>com.anshuman.spring.graalvm.App</start-class>
		<spring-graalvm-native.version>0.8.5</spring-graalvm-native.version>
		<native-image-maven-plugin.version>20.3.1.2</native-image-maven-plugin.version>
	</properties>

	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</pluginRepository>
	</pluginRepositories>

	<dependencies>
		<dependency>
			<!-- Spring Boot ships with lots of autoconfiguration projects, which only kick in when there are specific classes found on the class path.
			Since this is done at runtime, it would not work with GraalVM. But the Spring Graal @AutomaticFeature also takes care of this.
			It simply analyzes the META-INF/spring.factories file, where the autoconfiguration classes are usually listed.
			The Spring Graal @AutomaticFeature again pulls the work from runtime to build time – and thus eliminates the need for runtime autoconfiguration.-->

			<!-- Additionally, the feature will chase down imported annotated classes like @Import.
			It “knows” which kinds of annotations lead to reflection needs at runtime, which with GraalVM need to be registered at build time.
			And as resource files like application.properties also need to be registered at build time, the feature covers those too -->
			<groupId>org.springframework.experimental</groupId>
			<artifactId>spring-graalvm-native</artifactId>
			<version>${spring-graalvm-native.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>
		<dependency>
			<!-- Using the native-image-maven-plugin we have to explicitly include the spring-context-indexer dependency inside our pom.xml -->
			<!-- GraalVM does not support runtime class path scanning. This project moves class path scanning from runtime to build time -->
			<!-- All modules that are target of component scan must use this mechanism. -->
			<!-- produces: META-INF/spring.components -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-indexer</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>native-image</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.graalvm.nativeimage</groupId>
						<artifactId>native-image-maven-plugin</artifactId>
						<version>${native-image-maven-plugin.version}</version>
						<configuration>
							<buildArgs>-J-Xmx4G -H:+ReportExceptionStackTraces -Dspring.native.remove-unused-autoconfig=true -Dspring.native.remove-yaml-support=true</buildArgs>
							<imageName>${project.artifactId}</imageName>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>native-image</goal>
								</goals>
								<phase>package</phase>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<excludes>
								<exclude>
									<groupId>org.projectlombok</groupId>
									<artifactId>lombok</artifactId>
								</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
